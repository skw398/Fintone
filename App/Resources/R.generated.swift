//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }


  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 44 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: Add
      ///
      /// Key: Add
      ///
      /// Locales: en, ja
      var add: RswiftResources.StringResource { .init(key: "Add", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Alphabetical
      ///
      /// Key: Alphabetical
      ///
      /// Locales: en, ja
      var alphabetical: RswiftResources.StringResource { .init(key: "Alphabetical", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: The ticker symbol has already been added.
      ///
      /// Key: Already added stock
      ///
      /// Locales: en, ja
      var alreadyAddedStock: RswiftResources.StringResource { .init(key: "Already added stock", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Back
      ///
      /// Key: Back
      ///
      /// Locales: en, ja
      var back: RswiftResources.StringResource { .init(key: "Back", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Cancel
      ///
      /// Key: Cancel
      ///
      /// Locales: en, ja
      var cancel: RswiftResources.StringResource { .init(key: "Cancel", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Change Amount
      ///
      /// Key: Change Amount
      ///
      /// Locales: en, ja
      var changeAmount: RswiftResources.StringResource { .init(key: "Change Amount", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Close
      ///
      /// Key: Close
      ///
      /// Locales: en, ja
      var close: RswiftResources.StringResource { .init(key: "Close", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Custom Order
      ///
      /// Key: Custom Order
      ///
      /// Locales: en, ja
      var customOrder: RswiftResources.StringResource { .init(key: "Custom Order", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Delete
      ///
      /// Key: Delete
      ///
      /// Locales: en, ja
      var delete: RswiftResources.StringResource { .init(key: "Delete", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Edit
      ///
      /// Key: Edit
      ///
      /// Locales: en, ja
      var edit: RswiftResources.StringResource { .init(key: "Edit", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: No more than 50 stocks can be added. Create a new portfolio.
      ///
      /// Key: Exceed max symbol count
      ///
      /// Locales: en, ja
      var exceedMaxSymbolCount: RswiftResources.StringResource { .init(key: "Exceed max symbol count", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Exceeding $1 billion cannot be entered.
      ///
      /// Key: Exceeding $1 billion
      ///
      /// Locales: en, ja
      var exceeding1Billion: RswiftResources.StringResource { .init(key: "Exceeding $1 billion", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Exceeding 10 digits cannot be entered.
      ///
      /// Key: Exceeding 10 digits
      ///
      /// Locales: en, ja
      var exceeding10Digits: RswiftResources.StringResource { .init(key: "Exceeding 10 digits", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Failed to fetch data.
      ///
      /// Key: Failed to fetch data
      ///
      /// Locales: en, ja
      var failedToFetchData: RswiftResources.StringResource { .init(key: "Failed to fetch data", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Initial Portfolio
      ///
      /// Key: Initial Portfolio
      ///
      /// Locales: en, ja
      var initialPortfolio: RswiftResources.StringResource { .init(key: "Initial Portfolio", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Done
      ///
      /// Key: Kakutei
      ///
      /// Locales: en, ja
      var kakutei: RswiftResources.StringResource { .init(key: "Kakutei", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Done
      ///
      /// Key: Kanryo
      ///
      /// Locales: en, ja
      var kanryo: RswiftResources.StringResource { .init(key: "Kanryo", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Market Value
      ///
      /// Key: Market Value
      ///
      /// Locales: en, ja
      var marketValue: RswiftResources.StringResource { .init(key: "Market Value", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: New Portfolio
      ///
      /// Key: New Portfolio
      ///
      /// Locales: en, ja
      var newPortfolio: RswiftResources.StringResource { .init(key: "New Portfolio", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: No Stocks...
      ///
      /// Key: No Symbols...
      ///
      /// Locales: en, ja
      var noSymbols: RswiftResources.StringResource { .init(key: "No Symbols...", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: No more than 30 portfolios can be added.
      ///
      /// Key: No more than 30 portfolios
      ///
      /// Locales: en, ja
      var noMoreThan30Portfolios: RswiftResources.StringResource { .init(key: "No more than 30 portfolios", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Percent Change
      ///
      /// Key: Percent Change
      ///
      /// Locales: en, ja
      var percentChange: RswiftResources.StringResource { .init(key: "Percent Change", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Unable to retrieve stock data due to reasons such as delisting, ticker symbol change, and other causes. Please remove the stock from the portfolio.
      ///
      /// Key: Please remove the stock
      ///
      /// Locales: en, ja
      var pleaseRemoveTheStock: RswiftResources.StringResource { .init(key: "Please remove the stock", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Portfolio Name
      ///
      /// Key: Portfolio Name
      ///
      /// Locales: en, ja
      var portfolioName: RswiftResources.StringResource { .init(key: "Portfolio Name", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Portfolios
      ///
      /// Key: Portfolios
      ///
      /// Locales: en, ja
      var portfolios: RswiftResources.StringResource { .init(key: "Portfolios", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Profit Or Loss
      ///
      /// Key: Profit Or Loss
      ///
      /// Locales: en, ja
      var profitOrLoss: RswiftResources.StringResource { .init(key: "Profit Or Loss", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Reload
      ///
      /// Key: Reload
      ///
      /// Locales: en, ja
      var reload: RswiftResources.StringResource { .init(key: "Reload", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Rename
      ///
      /// Key: Rename
      ///
      /// Locales: en, ja
      var rename: RswiftResources.StringResource { .init(key: "Rename", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Report Feedback or Issues
      ///
      /// Key: Report Feedback or Issues
      ///
      /// Locales: en, ja
      var reportFeedbackOrIssues: RswiftResources.StringResource { .init(key: "Report Feedback or Issues", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Terms of Use & Privacy Policy
      ///
      /// Key: Terms of Use and Privacy Policy
      ///
      /// Locales: en, ja
      var termsOfUseAndPrivacyPolicy: RswiftResources.StringResource { .init(key: "Terms of Use and Privacy Policy", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Ticker Symbol
      ///
      /// Key: Ticker Symbol
      ///
      /// Locales: en, ja
      var tickerSymbol: RswiftResources.StringResource { .init(key: "Ticker Symbol", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Ticker symbol not found
      ///
      /// Key: Ticker symbol not found
      ///
      /// Locales: en, ja
      var tickerSymbolNotFound: RswiftResources.StringResource { .init(key: "Ticker symbol not found", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Undo
      ///
      /// Key: Undo
      ///
      /// Locales: en, ja
      var undo: RswiftResources.StringResource { .init(key: "Undo", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: • The app displays the top portfolio upon launch. • With iCloud sync enabled, data is synced between devices that are signed in with the same AppleID.
      ///
      /// Key: When the app is launched
      ///
      /// Locales: en, ja
      var whenTheAppIsLaunched: RswiftResources.StringResource { .init(key: "When the app is launched", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Failed to decode data.
      ///
      /// Key: decode error occurred
      ///
      /// Locales: en, ja
      var decodeErrorOccurred: RswiftResources.StringResource { .init(key: "decode error occurred", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: The displayed portfolio has been deleted
      ///
      /// Key: displayed portfolio has been deleted
      ///
      /// Locales: en, ja
      var displayedPortfolioHasBeenDeleted: RswiftResources.StringResource { .init(key: "displayed portfolio has been deleted", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Failed to fetch data.
      ///
      /// Key: fetch error occurred
      ///
      /// Locales: en, ja
      var fetchErrorOccurred: RswiftResources.StringResource { .init(key: "fetch error occurred", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Invalid request.
      ///
      /// Key: invalid request
      ///
      /// Locales: en, ja
      var invalidRequest: RswiftResources.StringResource { .init(key: "invalid request", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: A network error occurred. Please check your network environment and try again.
      ///
      /// Key: network error occurred
      ///
      /// Locales: en, ja
      var networkErrorOccurred: RswiftResources.StringResource { .init(key: "network error occurred", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Price
      ///
      /// Key: price
      ///
      /// Locales: en, ja
      var price: RswiftResources.StringResource { .init(key: "price", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: stocks
      ///
      /// Key: stocks
      ///
      /// Locales: en, ja
      var stocks: RswiftResources.StringResource { .init(key: "stocks", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: An unexpected error has occurred
      ///
      /// Key: unexpected error occurred
      ///
      /// Locales: en, ja
      var unexpectedErrorOccurred: RswiftResources.StringResource { .init(key: "unexpected error occurred", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Are you sure you want to delete the portfolio?
      ///
      /// Key: want to delete the portfolio
      ///
      /// Locales: en, ja
      var wantToDeleteThePortfolio: RswiftResources.StringResource { .init(key: "want to delete the portfolio", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Are you sure you want to delete the stock?
      ///
      /// Key: want to delete the stock
      ///
      /// Locales: en, ja
      var wantToDeleteTheStock: RswiftResources.StringResource { .init(key: "want to delete the stock", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `BackgroundColor`.
    var backgroundColor: RswiftResources.ColorResource { .init(name: "BackgroundColor", path: [], bundle: bundle) }

    /// Color `BrighterBackgroundColor`.
    var brighterBackgroundColor: RswiftResources.ColorResource { .init(name: "BrighterBackgroundColor", path: [], bundle: bundle) }

    /// Color `BrightestGreen`.
    var brightestGreen: RswiftResources.ColorResource { .init(name: "BrightestGreen", path: [], bundle: bundle) }

    /// Color `BrightestRed`.
    var brightestRed: RswiftResources.ColorResource { .init(name: "BrightestRed", path: [], bundle: bundle) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 12 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `ColorLegendView`.
    var colorLegendView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ColorLegendView", bundle: bundle) }

    /// Nib `HeaderView`.
    var headerView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "HeaderView", bundle: bundle) }

    /// Nib `HelpView`.
    var helpView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "HelpView", bundle: bundle) }

    /// Nib `HighlightedStockView`.
    var highlightedStockView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "HighlightedStockView", bundle: bundle) }

    /// Nib `IndexView`.
    var indexView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "IndexView", bundle: bundle) }

    /// Nib `LaunchView`.
    var launchView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "LaunchView", bundle: bundle) }

    /// Nib `LogoView`.
    var logoView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "LogoView", bundle: bundle) }

    /// Nib `NoStocksView`.
    var noStocksView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "NoStocksView", bundle: bundle) }

    /// Nib `PortfoliosTableViewCell`.
    var portfoliosTableViewCell: RswiftResources.NibReferenceReuseIdentifier<PortfoliosTableViewCell, PortfoliosTableViewCell> { .init(name: "PortfoliosTableViewCell", bundle: bundle, identifier: "PortfoliosTableViewCell") }

    /// Nib `StockTableViewCell`.
    var stockTableViewCell: RswiftResources.NibReference<StockTableViewCell> { .init(name: "StockTableViewCell", bundle: bundle) }

    /// Nib `ToolView`.
    var toolView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ToolView", bundle: bundle) }

    /// Nib `TotalView`.
    var totalView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "TotalView", bundle: bundle) }

    func validate() throws {
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'ColorLegendView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'HeaderView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BrightestGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BrightestGreen' is used in nib 'HelpView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'HighlightedStockView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'IndexView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BrighterBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BrighterBackgroundColor' is used in nib 'LaunchView', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'plus.circle.fill' is used in nib 'NoStocksView', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'PortfoliosTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'ellipsis' is used in nib 'StockTableViewCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "exclamationmark.triangle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'exclamationmark.triangle.fill' is used in nib 'StockTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'StockTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.clockwise") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.clockwise' is used in nib 'ToolView', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.up.arrow.down") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.up.arrow.down' is used in nib 'ToolView', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'plus' is used in nib 'ToolView', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "questionmark.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'questionmark.circle.fill' is used in nib 'TotalView', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'TotalView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BrighterBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BrighterBackgroundColor' is used in nib 'TotalView', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `InfoCell`.
    let infoCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "InfoCell")

    /// Reuse identifier `PortfoliosTableViewCell`.
    let portfoliosTableViewCell: RswiftResources.ReuseIdentifier<PortfoliosTableViewCell> = .init(identifier: "PortfoliosTableViewCell")

    /// Reuse identifier `SortTableViewCell`.
    let sortTableViewCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "SortTableViewCell")

    /// Reuse identifier `StocksTableViewCell`.
    let stocksTableViewCell: RswiftResources.ReuseIdentifier<StockTableViewCell> = .init(identifier: "StocksTableViewCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var infoViewController: infoViewController { .init(bundle: bundle) }
    var inputAmountViewController: inputAmountViewController { .init(bundle: bundle) }
    var portfolioListViewController: portfolioListViewController { .init(bundle: bundle) }
    var portfolioViewController: portfolioViewController { .init(bundle: bundle) }
    var sortViewController: sortViewController { .init(bundle: bundle) }
    var stockSearchViewController: stockSearchViewController { .init(bundle: bundle) }

    func infoViewController(bundle: Foundation.Bundle) -> infoViewController {
      .init(bundle: bundle)
    }
    func inputAmountViewController(bundle: Foundation.Bundle) -> inputAmountViewController {
      .init(bundle: bundle)
    }
    func portfolioListViewController(bundle: Foundation.Bundle) -> portfolioListViewController {
      .init(bundle: bundle)
    }
    func portfolioViewController(bundle: Foundation.Bundle) -> portfolioViewController {
      .init(bundle: bundle)
    }
    func sortViewController(bundle: Foundation.Bundle) -> sortViewController {
      .init(bundle: bundle)
    }
    func stockSearchViewController(bundle: Foundation.Bundle) -> stockSearchViewController {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.infoViewController.validate()
      try self.inputAmountViewController.validate()
      try self.portfolioListViewController.validate()
      try self.portfolioViewController.validate()
      try self.sortViewController.validate()
      try self.stockSearchViewController.validate()
    }


    /// Storyboard `InfoViewController`.
    struct infoViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = InfoViewController

      let bundle: Foundation.Bundle

      let name = "InfoViewController"

      var infoViewController: RswiftResources.StoryboardViewControllerIdentifier<InfoViewController> { .init(identifier: "InfoViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in storyboard 'InfoViewController', but couldn't be loaded.") }
        if infoViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'infoViewController' could not be loaded from storyboard 'InfoViewController' as 'InfoViewController'.") }
      }
    }

    /// Storyboard `InputAmountViewController`.
    struct inputAmountViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = InputAmountViewController

      let bundle: Foundation.Bundle

      let name = "InputAmountViewController"

      var inputAmountViewController: RswiftResources.StoryboardViewControllerIdentifier<InputAmountViewController> { .init(identifier: "InputAmountViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in storyboard 'InputAmountViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BrighterBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BrighterBackgroundColor' is used in storyboard 'InputAmountViewController', but couldn't be loaded.") }
        if inputAmountViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'inputAmountViewController' could not be loaded from storyboard 'InputAmountViewController' as 'InputAmountViewController'.") }
      }
    }

    /// Storyboard `PortfolioListViewController`.
    struct portfolioListViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "PortfolioListViewController"

      var selectPortfolioView: RswiftResources.StoryboardViewControllerIdentifier<PortfolioListViewController> { .init(identifier: "SelectPortfolioView", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'plus' is used in storyboard 'PortfolioListViewController', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in storyboard 'PortfolioListViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BrighterBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BrighterBackgroundColor' is used in storyboard 'PortfolioListViewController', but couldn't be loaded.") }
        if selectPortfolioView() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'selectPortfolioView' could not be loaded from storyboard 'PortfolioListViewController' as 'PortfolioListViewController'.") }
      }
    }

    /// Storyboard `PortfolioViewController`.
    struct portfolioViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "PortfolioViewController"
      func validate() throws {
        if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in storyboard 'PortfolioViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BrighterBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BrighterBackgroundColor' is used in storyboard 'PortfolioViewController', but couldn't be loaded.") }
      }
    }

    /// Storyboard `SortViewController`.
    struct sortViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = SortViewController

      let bundle: Foundation.Bundle

      let name = "SortViewController"
      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "xmark") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'xmark' is used in storyboard 'SortViewController', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in storyboard 'SortViewController', but couldn't be loaded.") }
      }
    }

    /// Storyboard `StockSearchViewController`.
    struct stockSearchViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = StockSearchViewController

      let bundle: Foundation.Bundle

      let name = "StockSearchViewController"

      var stockSearchViewController: RswiftResources.StoryboardViewControllerIdentifier<StockSearchViewController> { .init(identifier: "StockSearchViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIColor(named: "BrighterBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BrighterBackgroundColor' is used in storyboard 'StockSearchViewController', but couldn't be loaded.") }
        if stockSearchViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'stockSearchViewController' could not be loaded from storyboard 'StockSearchViewController' as 'StockSearchViewController'.") }
      }
    }
  }
}